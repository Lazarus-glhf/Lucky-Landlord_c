  Bee.cpp
  BlackPepper.cpp
D:\luckhome\luckyhome\luckyhome\Bee.cpp(3,6): error C2084: 函数“Bee::Bee(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Bee.h(14,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Bee.cpp(26,19): error C2264: “Bee::Bee”: 函数定义或声明中有错误；未调用函数
  Bubble.cpp
D:\luckhome\luckyhome\luckyhome\Bubble.cpp(3,9): error C2084: 函数“Bubble::Bubble(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Bubble.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Bubble.cpp(15,22): error C2264: “Bubble::Bubble”: 函数定义或声明中有错误；未调用函数
  Cat.cpp
D:\luckhome\luckyhome\luckyhome\Cat.cpp(3,6): error C2084: 函数“Cat::Cat(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Cat.h(16,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Cat.cpp(21,19): error C2264: “Cat::Cat”: 函数定义或声明中有错误；未调用函数
  Coconut.cpp
  Coin.cpp
D:\luckhome\luckyhome\luckyhome\Coin.cpp(3,7): error C2084: 函数“Coin::Coin(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Coin.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Coin.cpp(14,20): error C2264: “Coin::Coin”: 函数定义或声明中有错误；未调用函数
  Cow.cpp
D:\luckhome\luckyhome\luckyhome\Cow.cpp(4,6): error C2084: 函数“Cow::Cow(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Cow.h(12,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Cow.cpp(39,19): error C2264: “Cow::Cow”: 函数定义或声明中有错误；未调用函数
  Empty.cpp
  Fish.cpp
  Flower.cpp
D:\luckhome\luckyhome\luckyhome\Flower.cpp(3,9): error C2084: 函数“Flower::Flower(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Flower.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Flower.cpp(14,22): error C2264: “Flower::Flower”: 函数定义或声明中有错误；未调用函数
  Goldegg.cpp
D:\luckhome\luckyhome\luckyhome\Goldegg.cpp(3,10): error C2084: 函数“Goldegg::Goldegg(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Goldegg.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Goldegg.cpp(14,23): error C2264: “Goldegg::Goldegg”: 函数定义或声明中有错误；未调用函数
  Goose.cpp
D:\luckhome\luckyhome\luckyhome\Goose.cpp(3,8): error C2084: 函数“Goose::Goose(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Goose.h(12,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Goose.cpp(20,19): warning C4244: “参数”: 从“time_t”转换到“unsigned int”，可能丢失数据
D:\luckhome\luckyhome\luckyhome\Goose.cpp(36,21): error C2264: “Goose::Goose”: 函数定义或声明中有错误；未调用函数
  GreenPepper.cpp
  Halfcoconut.cpp
D:\luckhome\luckyhome\luckyhome\Halfcoconut.cpp(3,14): error C2084: 函数“Halfcoconut::Halfcoconut(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Halfcoconut.h(14,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Halfcoconut.cpp(21,27): error C2264: “Halfcoconut::Halfcoconut”: 函数定义或声明中有错误；未调用函数
  Hugetreasure.cpp
D:\luckhome\luckyhome\luckyhome\Hugetreasure.cpp(3,15): error C2084: 函数“Hugetreasure::Hugetreasure(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Hugetreasure.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Hugetreasure.cpp(14,28): error C2264: “Hugetreasure::Hugetreasure”: 函数定义或声明中有错误；未调用函数
  Key.cpp
  Lockbox.cpp
D:\luckhome\luckyhome\luckyhome\Lockbox.cpp(3,10): error C2084: 函数“Lockbox::Lockbox(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Lockbox.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Lockbox.cpp(14,23): error C2264: “Lockbox::Lockbox”: 函数定义或声明中有错误；未调用函数
  LockRemover.cpp
D:\luckhome\luckyhome\luckyhome\LockRemover.cpp(28,30): warning C4244: “参数”: 从“time_t”转换到“unsigned int”，可能丢失数据
D:\luckhome\luckyhome\luckyhome\LockRemover.cpp(39,35): error C2061: 语法错误: 标识符“Empty”
D:\luckhome\luckyhome\luckyhome\LockRemover.cpp(50,30): warning C4244: “参数”: 从“time_t”转换到“unsigned int”，可能丢失数据
D:\luckhome\luckyhome\luckyhome\LockRemover.cpp(61,35): error C2061: 语法错误: 标识符“Empty”
D:\luckhome\luckyhome\luckyhome\LockRemover.cpp(72,30): warning C4244: “参数”: 从“time_t”转换到“unsigned int”，可能丢失数据
D:\luckhome\luckyhome\luckyhome\LockRemover.cpp(83,35): error C2061: 语法错误: 标识符“Empty”
D:\luckhome\luckyhome\luckyhome\LockRemover.cpp(94,30): warning C4244: “参数”: 从“time_t”转换到“unsigned int”，可能丢失数据
D:\luckhome\luckyhome\luckyhome\LockRemover.cpp(105,35): error C2061: 语法错误: 标识符“Empty”
  Magickey.cpp
  main.cpp
D:\luckhome\luckyhome\luckyhome\main.cpp(1,1): warning C4335: 检测到 Mac 文件格式: 请将源文件转换为 DOS 格式或 UNIX 格式
D:\luckhome\luckyhome\luckyhome\main.cpp(1,9): warning C4067: 预处理器指令后有意外标记 - 应输入换行符
  正在生成代码...
  正在编译...
  Milk.cpp
D:\luckhome\luckyhome\luckyhome\Milk.cpp(3,7): error C2084: 函数“Milk::Milk(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Milk.h(12,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Milk.cpp(14,20): error C2264: “Milk::Milk”: 函数定义或声明中有错误；未调用函数
  Monkey.cpp
  MonkeyOlivander.cpp
  Pearl.cpp
D:\luckhome\luckyhome\luckyhome\Pearl.cpp(3,8): error C2084: 函数“Pearl::Pearl(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Pearl.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Pearl.cpp(14,21): error C2264: “Pearl::Pearl”: 函数定义或声明中有错误；未调用函数
  Pearl.h
  Position.cpp
D:\luckhome\luckyhome\luckyhome\Thing.h(24,11): error C3646: “position”: 未知重写说明符
  (编译源文件“Position.cpp”)
  
D:\luckhome\luckyhome\luckyhome\Thing.h(24,19): error C4430: 缺少类型说明符 - 假定为 int。注意: C++ 不支持默认 int
  (编译源文件“Position.cpp”)
  
D:\luckhome\luckyhome\luckyhome\Thing.h(57,11): error C3646: “getPosition”: 未知重写说明符
  (编译源文件“Position.cpp”)
  
D:\luckhome\luckyhome\luckyhome\Thing.h(57,22): error C2059: 语法错误:“(”
  (编译源文件“Position.cpp”)
  
D:\luckhome\luckyhome\luckyhome\Thing.h(57,24): error C2238: 意外的标记位于“;”之前
  (编译源文件“Position.cpp”)
  
D:\luckhome\luckyhome\luckyhome\Thing.h(58,19): error C2061: 语法错误: 标识符“Position”
  (编译源文件“Position.cpp”)
  
D:\luckhome\luckyhome\luckyhome\Position.cpp(8,11): error C2084: 函数“Position::Position(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Position.cpp(3,11):
  参见“{ctor}”的前一个定义
  
  Rain.cpp
  RainCloud.cpp
  Steelsafe.cpp
D:\luckhome\luckyhome\luckyhome\Steelsafe.cpp(3,12): error C2084: 函数“Steelsafe::Steelsafe(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Steelsafe.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Steelsafe.cpp(14,25): error C2264: “Steelsafe::Steelsafe”: 函数定义或声明中有错误；未调用函数
  Strawberry.cpp
  Sun.cpp
D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,40): error C2676: 二进制“!=”:“Position”不定义该运算符或到预定义运算符可接收的类型的转换
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector(2244,17):
  可能是“bool std::operator !=(const std::vector<_Ty,_Alloc> &,const std::vector<_Ty,_Alloc> &)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::vector<_Ty,_Alloc> &,const std::vector<_Ty,_Alloc> &)”: 无法从“Position”推导出“const std::vector<_Ty,_Alloc> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\map(641,17):
  或    “bool std::operator !=(const std::multimap<_Kty,_Ty,_Pr,_Alloc> &,const std::multimap<_Kty,_Ty,_Pr,_Alloc> &)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::multimap<_Kty,_Ty,_Pr,_Alloc> &,const std::multimap<_Kty,_Ty,_Pr,_Alloc> &)”: 无法从“Position”推导出“const std::multimap<_Kty,_Ty,_Pr,_Alloc> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\map(407,17):
  或    “bool std::operator !=(const std::map<_Kty,_Ty,_Pr,_Alloc> &,const std::map<_Kty,_Ty,_Pr,_Alloc> &)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::map<_Kty,_Ty,_Pr,_Alloc> &,const std::map<_Kty,_Ty,_Pr,_Alloc> &)”: 无法从“Position”推导出“const std::map<_Kty,_Ty,_Pr,_Alloc> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\tuple(887,27):
  或    “bool std::operator !=(const std::tuple<_Types...> &,const std::tuple<_Types...> &)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::tuple<_Types...> &,const std::tuple<_Types...> &)”: 无法从“Position”推导出“const std::tuple<_Types...> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory(3534,17):
  或    “bool std::operator !=(std::nullptr_t,const std::unique_ptr<_Ty,_Dx> &) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(std::nullptr_t,const std::unique_ptr<_Ty,_Dx> &) noexcept”: 无法从“Position”推导出“const std::unique_ptr<_Ty,_Dx> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory(3529,17):
  或    “bool std::operator !=(const std::unique_ptr<_Ty,_Dx> &,std::nullptr_t) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::unique_ptr<_Ty,_Dx> &,std::nullptr_t) noexcept”: 无法从“Position”推导出“const std::unique_ptr<_Ty,_Dx> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory(3476,17):
  或    “bool std::operator !=(const std::unique_ptr<_Ty,_Dx> &,const std::unique_ptr<_Ty2,_Dx2> &)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::unique_ptr<_Ty,_Dx> &,const std::unique_ptr<_Ty2,_Dx2> &)”: 无法从“Position”推导出“const std::unique_ptr<_Ty,_Dx> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory(1900,17):
  或    “bool std::operator !=(std::nullptr_t,const std::shared_ptr<_Ty> &) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(std::nullptr_t,const std::shared_ptr<_Ty> &) noexcept”: 无法从“Position”推导出“const std::shared_ptr<_Ty> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory(1895,17):
  或    “bool std::operator !=(const std::shared_ptr<_Ty> &,std::nullptr_t) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::shared_ptr<_Ty> &,std::nullptr_t) noexcept”: 无法从“Position”推导出“const std::shared_ptr<_Ty> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory(1853,17):
  或    “bool std::operator !=(const std::shared_ptr<_Ty> &,const std::shared_ptr<_Ty0> &) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::shared_ptr<_Ty> &,const std::shared_ptr<_Ty0> &) noexcept”: 无法从“Position”推导出“const std::shared_ptr<_Ty> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring(5084,17):
  或    “bool std::operator !=(const std::basic_string<_Elem,_Traits,_Alloc> &,const _Elem *const ) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::basic_string<_Elem,_Traits,_Alloc> &,const _Elem *const ) noexcept”: 无法从“Position”推导出“const std::basic_string<_Elem,_Traits,_Alloc> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring(5078,17):
  或    “bool std::operator !=(const _Elem *const ,const std::basic_string<_Elem,_Traits,_Alloc> &) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const _Elem *const ,const std::basic_string<_Elem,_Traits,_Alloc> &) noexcept”: 无法从“Position”推导出“const _Elem *const ”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring(5072,17):
  或    “bool std::operator !=(const std::basic_string<_Elem,_Traits,_Alloc> &,const std::basic_string<_Elem,_Traits,_Alloc> &) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::basic_string<_Elem,_Traits,_Alloc> &,const std::basic_string<_Elem,_Traits,_Alloc> &) noexcept”: 无法从“Position”推导出“const std::basic_string<_Elem,_Traits,_Alloc> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory(1048,17):
  或    “bool std::operator !=(const std::allocator<_Ty> &,const std::allocator<_Other> &) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::allocator<_Ty> &,const std::allocator<_Other> &) noexcept”: 无法从“Position”推导出“const std::allocator<_Ty> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iterator(495,17):
  或    “bool std::operator !=(const std::istreambuf_iterator<_Elem,_Traits> &,const std::istreambuf_iterator<_Elem,_Traits> &)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::istreambuf_iterator<_Elem,_Traits> &,const std::istreambuf_iterator<_Elem,_Traits> &)”: 无法从“Position”推导出“const std::istreambuf_iterator<_Elem,_Traits> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iterator(313,17):
  或    “bool std::operator !=(const std::istream_iterator<_Ty,_Elem,_Traits,_Diff> &,const std::istream_iterator<_Ty,_Elem,_Traits,_Diff> &) noexcept”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::istream_iterator<_Ty,_Elem,_Traits,_Diff> &,const std::istream_iterator<_Ty,_Elem,_Traits,_Diff> &) noexcept”: 无法从“Position”推导出“const std::istream_iterator<_Ty,_Elem,_Traits,_Diff> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xutility(4243,30):
  或    “bool std::operator !=(const std::move_iterator<_Iter> &,const std::move_iterator<_Iter2> &) noexcept(<expr>)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::move_iterator<_Iter> &,const std::move_iterator<_Iter2> &) noexcept(<expr>)”: 无法从“Position”推导出“const std::move_iterator<_Iter> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xutility(1701,5):
  或    “bool std::operator !=(const std::reverse_iterator<_BidIt> &,const std::reverse_iterator<_BidIt2> &) noexcept(<expr>)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::reverse_iterator<_BidIt> &,const std::reverse_iterator<_BidIt2> &) noexcept(<expr>)”: 无法从“Position”推导出“const std::reverse_iterator<_BidIt> &”的 模板 参数
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility(507,27):
  或    “bool std::operator !=(const std::pair<_Ty1,_Ty2> &,const std::pair<_Uty1,_Uty2> &)”
  	D:\luckhome\luckyhome\luckyhome\Strawberry.cpp(13,37):
  	“bool std::operator !=(const std::pair<_Ty1,_Ty2> &,const std::pair<_Uty1,_Uty2> &)”: 无法从“Position”推导出“const std::pair<_Ty1,_Ty2> &”的 模板 参数
  
  Thing.cpp
D:\luckhome\luckyhome\luckyhome\Thing.cpp(4,8): error C2084: 函数“Thing::Thing(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Thing.h(28,2):
  参见“{ctor}”的前一个定义
  
  Treasure.cpp
D:\luckhome\luckyhome\luckyhome\Treasure.cpp(3,11): error C2084: 函数“Treasure::Treasure(void)”已有主体
  D:\luckhome\luckyhome\luckyhome\Treasure.h(11,5):
  参见“{ctor}”的前一个定义
  
D:\luckhome\luckyhome\luckyhome\Treasure.cpp(14,24): error C2264: “Treasure::Treasure”: 函数定义或声明中有错误；未调用函数
  正在生成代码...
